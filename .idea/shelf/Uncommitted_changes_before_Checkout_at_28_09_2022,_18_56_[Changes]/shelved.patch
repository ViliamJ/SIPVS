Index: formular_web/admin.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from django.contrib import admin\n\n# Register your models here.\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/formular_web/admin.py b/formular_web/admin.py
--- a/formular_web/admin.py	(revision 8982e6f5c4cc96e5d2c3c53175ee75376743c091)
+++ b/formular_web/admin.py	(date 1664379147296)
@@ -1,3 +1,7 @@
 from django.contrib import admin
 
+
+
 # Register your models here.
+
+
Index: formular_web/models.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from django.db import models\n\n# Create your models here.\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/formular_web/models.py b/formular_web/models.py
--- a/formular_web/models.py	(revision 8982e6f5c4cc96e5d2c3c53175ee75376743c091)
+++ b/formular_web/models.py	(date 1664378265184)
@@ -1,3 +1,12 @@
 from django.db import models
+from django.forms import FloatField, DateField
+
 
-# Create your models here.
+class Car(models.Model):
+    CAR_TYPE = (("PERSONAL", "PERSONAL"), ("TRUCK", "TRUCK"))
+    car_name = models.CharField(max_length=30, blank=True, null=True)
+    SPZ = models.CharField(max_length=7, blank=True, null=True)
+    car_type = models.CharField(max_length=20, choices=CAR_TYPE, blank=True, null=True)
+
+    def __str__(self):
+        return self.SPZ
Index: formular_web/views.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from django.shortcuts import render\n\n\n# Create your views here.\n\nfrom django.shortcuts import render\n\n\ndef home_view(request):\n    #print(request.GET)\n    marha = request.GET\n    print(marha)\n    return render(request, \"home.html\")\n\ndef person_view(request):\n    return render(request, \"person_form_template.html\")\n\nfrom django.http import HttpResponseRedirect, HttpResponse\nfrom django.shortcuts import render\n\nfrom .forms import carForm\n\ndef get_car(request):\n    # if this is a POST request we need to process the form data\n    if request.method == 'POST':\n        # create a form instance and populate it with data from the request:\n        form = carForm(request.POST)\n        # check whether it's valid:\n        if form.is_valid():\n            # process the data in form.cleaned_data as required\n            # ...\n            # redirect to a new URL:\n            if 'generateXml' in request.POST:\n                print(request.POST)\n                return HttpResponse(\"generated\")\n            elif 'validateXml' in request.POST:\n                return HttpResponse(\"validated\")\n\n    # if a GET (or any other method) we'll create a blank form\n    else:\n        form = carForm()\n\n    return render(request, 'car_from_template.html', {'form': form})
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/formular_web/views.py b/formular_web/views.py
--- a/formular_web/views.py	(revision 8982e6f5c4cc96e5d2c3c53175ee75376743c091)
+++ b/formular_web/views.py	(date 1664381636143)
@@ -1,43 +1,26 @@
+from django.forms import formset_factory
+from django.shortcuts import render, redirect
+from django.template.context_processors import request
+from django.views import View
+
+from formular_web.forms import CarForm
+from formular_web.models import Car
+# Create your views here.
+from django.http import HttpResponseRedirect, HttpResponse
 from django.shortcuts import render
-
-
-# Create your views here.
-
 from django.shortcuts import render
 
 
 def home_view(request):
-    #print(request.GET)
-    marha = request.GET
-    print(marha)
     return render(request, "home.html")
 
-def person_view(request):
-    return render(request, "person_form_template.html")
-
-from django.http import HttpResponseRedirect, HttpResponse
-from django.shortcuts import render
 
-from .forms import carForm
+class CarFormView(request):
+    Car_FormSet = formset_factory(CarForm)
+    template_name = "car_form_template.html"
 
-def get_car(request):
-    # if this is a POST request we need to process the form data
-    if request.method == 'POST':
-        # create a form instance and populate it with data from the request:
-        form = carForm(request.POST)
-        # check whether it's valid:
-        if form.is_valid():
-            # process the data in form.cleaned_data as required
-            # ...
-            # redirect to a new URL:
-            if 'generateXml' in request.POST:
-                print(request.POST)
-                return HttpResponse("generated")
-            elif 'validateXml' in request.POST:
-                return HttpResponse("validated")
-
-    # if a GET (or any other method) we'll create a blank form
-    else:
-        form = carForm()
-
-    return render(request, 'car_from_template.html', {'form': form})
\ No newline at end of file
+    def get(self, request, *args, **kwargs):
+        context = {
+            'car_form': self.Car_FormSet(),
+        }
+        return render(request, self.template_name, context)
Index: templates/car_form_template.html
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Car</title>\n</head>\n<body>\n{% block content %}\n    <form action=\"/car/\"  method=\"post\">\n        {% csrf_token %}\n        <label for=\"spz\">SPZ: </label>\n        <input id=\"spz\" type=\"text\" name=\"spz\" maxlength=\"7\" required>\n\n\n        {{ form }}\n        <input type=\"submit\" name=\"generateXml\" value=\"Generate XML\">\n        <input type=\"submit\" name=\"validateXml\" value=\"Validate XML\">\n        <input type=\"submit\" name=\"showData\" value=\"show data\">\n    </form>\n{% endblock %}\n\n<!--<form action = \"\" method = \"GET\">\n        <label class=\"left\" for=\"car_types\">Choose a type of car:</label><br>\n        <select id=\"car_types\" name=\"car_types\">\n          <option value=\"personal\">Personal vehicle</option>\n          <option value=\"truck\">Truck</option>\n          <option value=\"pickup\">Pickup</option>\n          <option value=\"microbus\">Microbus</option>\n            <option value=\"bus\">Bus</option>\n        </select><br>\n\n        <label class=\"left\" for=\"spz1\">SPZ</label><br>\n        <input type=\"text\" id=\"spz1\" name=\"spz1\"><br>\n\n        <label class=\"left\" for=\"car_brand\">Car brand:</label><br>\n        <input type=\"text\" id=\"car_brand\" name=\"car_brand\"><br>\n\n         <label class=\"left\" for=\"year_of_manufacturing\">Year of manufacturing:</label><br>\n        <input type=\"number\" value=\"42\" id=\"year_of_manufacturing\" name=\"year_of_manufacturing\"><br>\n\n        <label for=\"registration_day\">Date of registration:</label><br>\n        <input type=\"date\" id=\"registration_day\" name=\"registration_day\"><br><br>\n    </form>-->\n</body>\n</html>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/templates/car_form_template.html b/templates/car_form_template.html
--- a/templates/car_form_template.html	(revision 8982e6f5c4cc96e5d2c3c53175ee75376743c091)
+++ b/templates/car_form_template.html	(date 1664380629696)
@@ -1,45 +1,38 @@
 <!DOCTYPE html>
+
+{% load static  %}
+
 <html lang="en">
 <head>
     <meta charset="UTF-8">
     <title>Car</title>
+    <script src="{% static 'admin/js/jquery.min.js' %}"></script>
+    <script src="{% static 'admin/js/jquery.formset.js' %}"></script>
 </head>
 <body>
-{% block content %}
-    <form action="/car/"  method="post">
+<div>
+    <form method="post" action="/car/">
         {% csrf_token %}
-        <label for="spz">SPZ: </label>
-        <input id="spz" type="text" name="spz" maxlength="7" required>
+        <fieldset>
+            <legend>Car registration</legend>
+            <div>
+                {{ car_form.management_form }}
+                {% for car in car_form %}
+                 <div class="link-formset">
+                     {{ contact }}
+                 </div>
+                {% endfor %}
+            </div>
+        </fieldset>
 
-
-        {{ form }}
-        <input type="submit" name="generateXml" value="Generate XML">
-        <input type="submit" name="validateXml" value="Validate XML">
-        <input type="submit" name="showData" value="show data">
+        <script>
+        $('.link-formset').formset({
+            addText: 'Add Car',
+            deleteText: 'Remove Car'
+        });
+        </script>
     </form>
-{% endblock %}
-
-<!--<form action = "" method = "GET">
-        <label class="left" for="car_types">Choose a type of car:</label><br>
-        <select id="car_types" name="car_types">
-          <option value="personal">Personal vehicle</option>
-          <option value="truck">Truck</option>
-          <option value="pickup">Pickup</option>
-          <option value="microbus">Microbus</option>
-            <option value="bus">Bus</option>
-        </select><br>
-
-        <label class="left" for="spz1">SPZ</label><br>
-        <input type="text" id="spz1" name="spz1"><br>
-
-        <label class="left" for="car_brand">Car brand:</label><br>
-        <input type="text" id="car_brand" name="car_brand"><br>
-
-         <label class="left" for="year_of_manufacturing">Year of manufacturing:</label><br>
-        <input type="number" value="42" id="year_of_manufacturing" name="year_of_manufacturing"><br>
-
-        <label for="registration_day">Date of registration:</label><br>
-        <input type="date" id="registration_day" name="registration_day"><br><br>
-    </form>-->
+</div>
 </body>
-</html>
\ No newline at end of file
+</html>
+
Index: formular_web/forms.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from django import forms\n\nclass carForm(forms.Form):\n    spz = forms.CharField(label='SPZ', max_length=7)
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/formular_web/forms.py b/formular_web/forms.py
--- a/formular_web/forms.py	(revision 8982e6f5c4cc96e5d2c3c53175ee75376743c091)
+++ b/formular_web/forms.py	(date 1664383889866)
@@ -1,4 +1,16 @@
 from django import forms
+from django.forms import BaseFormSet, formset_factory
+
+from formular_web.models import Car
 
-class carForm(forms.Form):
-    spz = forms.CharField(label='SPZ', max_length=7)
\ No newline at end of file
+
+class CarForm(forms.ModelForm):
+
+    class Meta:
+        model = Car
+        fields = ['car_name', 'SPZ', 'car_type']
+        widgets = {
+            'car_name': forms.TextInput(attrs={'required': True}),
+            'SPZ': forms.TextInput(attrs={'required': True}),
+            'car_type': forms.TextInput(attrs={'required': True})
+        }
Index: sipvs_project/urls.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>\"\"\"sipvs_project URL Configuration\n\nThe `urlpatterns` list routes URLs to views. For more information please see:\n    https://docs.djangoproject.com/en/4.1/topics/http/urls/\nExamples:\nFunction views\n    1. Add an import:  from my_app import views\n    2. Add a URL to urlpatterns:  path('', views.home, name='home')\nClass-based views\n    1. Add an import:  from other_app.views import Home\n    2. Add a URL to urlpatterns:  path('', Home.as_view(), name='home')\nIncluding another URLconf\n    1. Import the include() function: from django.urls import include, path\n    2. Add a URL to urlpatterns:  path('blog/', include('blog.urls'))\n\"\"\"\nfrom django.contrib import admin\nfrom django.urls import path\nfrom formular_web.views import *\nfrom django.contrib.staticfiles.urls import staticfiles_urlpatterns\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', home_view),\n    path('person/', person_view, name=\"person\"),\n    path('car/', get_car, name=\"car\")\n\n] + staticfiles_urlpatterns()
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/sipvs_project/urls.py b/sipvs_project/urls.py
--- a/sipvs_project/urls.py	(revision 8982e6f5c4cc96e5d2c3c53175ee75376743c091)
+++ b/sipvs_project/urls.py	(date 1664381636138)
@@ -13,15 +13,15 @@
     1. Import the include() function: from django.urls import include, path
     2. Add a URL to urlpatterns:  path('blog/', include('blog.urls'))
 """
+import self as self
 from django.contrib import admin
+from django.template.defaulttags import url
 from django.urls import path
 from formular_web.views import *
 from django.contrib.staticfiles.urls import staticfiles_urlpatterns
 
 urlpatterns = [
+    path('car/', CarFormView.get(CarFormView, request, )),
     path('admin/', admin.site.urls),
     path('', home_view),
-    path('person/', person_view, name="person"),
-    path('car/', get_car, name="car")
-
 ] + staticfiles_urlpatterns()
\ No newline at end of file
Index: templates/home.html
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><!DOCTYPE html>\n{% load static %}\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Title</title>\n  <link rel=\"stylesheet\" type=\"text/css\" href=\"{% static 'admin/css/style.css' %}\">\n</head>\n<body>\n<div class=\"center\">\n<h1> Cars registering page </h1>\n\n<h2> Identify car </h2>\n{% include \"car_form_template.html\" %}\n\n</div>\n</body>\n</html>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/templates/home.html b/templates/home.html
--- a/templates/home.html	(revision 8982e6f5c4cc96e5d2c3c53175ee75376743c091)
+++ b/templates/home.html	(date 1664360610486)
@@ -4,7 +4,7 @@
 <head>
     <meta charset="UTF-8">
     <title>Title</title>
-  <link rel="stylesheet" type="text/css" href="{% static 'admin/css/style.css' %}">
+
 </head>
 <body>
 <div class="center">
Index: static/admin/js/jquery.formset.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/static/admin/js/jquery.formset.js b/static/admin/js/jquery.formset.js
new file mode 100644
--- /dev/null	(date 1664316881147)
+++ b/static/admin/js/jquery.formset.js	(date 1664316881147)
@@ -0,0 +1,250 @@
+/**
+ * jQuery Formset 1.5-pre
+ * @author Stanislaus Madueke (stan DOT madueke AT gmail DOT com)
+ * @requires jQuery 1.2.6 or later
+ *
+ * Copyright (c) 2009, Stanislaus Madueke
+ * All rights reserved.
+ *
+ * Licensed under the New BSD License
+ * See: http://www.opensource.org/licenses/bsd-license.php
+ */
+;(function($) {
+    $.fn.formset = function(opts)
+    {
+        var options = $.extend({}, $.fn.formset.defaults, opts),
+            flatExtraClasses = options.extraClasses.join(' '),
+            totalForms = $('#id_' + options.prefix + '-TOTAL_FORMS'),
+            maxForms = $('#id_' + options.prefix + '-MAX_NUM_FORMS'),
+            minForms = $('#id_' + options.prefix + '-MIN_NUM_FORMS'),
+            childElementSelector = 'input,select,textarea,label,div',
+            $$ = $(this),
+
+            applyExtraClasses = function(row, ndx) {
+                if (options.extraClasses) {
+                    row.removeClass(flatExtraClasses);
+                    row.addClass(options.extraClasses[ndx % options.extraClasses.length]);
+                }
+            },
+
+            updateElementIndex = function(elem, prefix, ndx) {
+                var idRegex = new RegExp(prefix + '-(\\d+|__prefix__)-'),
+                    replacement = prefix + '-' + ndx + '-';
+                if (elem.attr("for")) elem.attr("for", elem.attr("for").replace(idRegex, replacement));
+                if (elem.attr('id')) elem.attr('id', elem.attr('id').replace(idRegex, replacement));
+                if (elem.attr('name')) elem.attr('name', elem.attr('name').replace(idRegex, replacement));
+            },
+
+            hasChildElements = function(row) {
+                return row.find(childElementSelector).length > 0;
+            },
+
+            showAddButton = function() {
+                return maxForms.length == 0 ||   // For Django versions pre 1.2
+                    (maxForms.val() == '' || (maxForms.val() - totalForms.val() > 0));
+            },
+
+            /**
+            * Indicates whether delete link(s) can be displayed - when total forms > min forms
+            */
+            showDeleteLinks = function() {
+                return minForms.length == 0 ||   // For Django versions pre 1.7
+                    (minForms.val() == '' || (totalForms.val() - minForms.val() > 0));
+            },
+
+            insertDeleteLink = function(row) {
+                var delCssSelector = $.trim(options.deleteCssClass).replace(/\s+/g, '.'),
+                    addCssSelector = $.trim(options.addCssClass).replace(/\s+/g, '.');
+
+                var delButtonHTML = '<a class="' + options.deleteCssClass + '" href="javascript:void(0)">' + options.deleteText +'</a>';
+                if (options.deleteContainerClass) {
+                    // If we have a specific container for the remove button,
+                    // place it as the last child of that container:
+                    row.find('[class*="' + options.deleteContainerClass + '"]').append(delButtonHTML);
+                } else if (row.is('TR')) {
+                    // If the forms are laid out in table rows, insert
+                    // the remove button into the last table cell:
+                    row.children(':last').append(delButtonHTML);
+                } else if (row.is('UL') || row.is('OL')) {
+                    // If they're laid out as an ordered/unordered list,
+                    // insert an <li> after the last list item:
+                    row.append('<li>' + delButtonHTML + '</li>');
+                } else {
+                    // Otherwise, just insert the remove button as the
+                    // last child element of the form's container:
+                    row.append(delButtonHTML);
+                }
+
+                // Check if we're under the minimum number of forms - not to display delete link at rendering
+                if (!showDeleteLinks()){
+                    row.find('a.' + delCssSelector).hide();
+                }
+
+                row.find('a.' + delCssSelector).click(function() {
+                    var row = $(this).parents('.' + options.formCssClass),
+                        del = row.find('input:hidden[id $= "-DELETE"]'),
+                        buttonRow = row.siblings("a." + addCssSelector + ', .' + options.formCssClass + '-add'),
+                        forms;
+                    if (del.length) {
+                        // We're dealing with an inline formset.
+                        // Rather than remove this form from the DOM, we'll mark it as deleted
+                        // and hide it, then let Django handle the deleting:
+                        del.val('on');
+                        row.hide();
+                        forms = $('.' + options.formCssClass).not(':hidden');
+                        totalForms.val(forms.length);
+                    } else {
+                        row.remove();
+                        // Update the TOTAL_FORMS count:
+                        forms = $('.' + options.formCssClass).not('.formset-custom-template');
+                        totalForms.val(forms.length);
+                    }
+                    for (var i=0, formCount=forms.length; i<formCount; i++) {
+                        // Apply `extraClasses` to form rows so they're nicely alternating:
+                        applyExtraClasses(forms.eq(i), i);
+                        if (!del.length) {
+                            // Also update names and IDs for all child controls (if this isn't
+                            // a delete-able inline formset) so they remain in sequence:
+                            forms.eq(i).find(childElementSelector).each(function() {
+                                updateElementIndex($(this), options.prefix, i);
+                            });
+                        }
+                    }
+                    // Check if we've reached the minimum number of forms - hide all delete link(s)
+                    if (!showDeleteLinks()){
+                        $('a.' + delCssSelector).each(function(){$(this).hide();});
+                    }
+                    // Check if we need to show the add button:
+                    if (buttonRow.is(':hidden') && showAddButton()) buttonRow.show();
+                    // If a post-delete callback was provided, call it with the deleted form:
+                    if (options.removed) options.removed(row);
+                    return false;
+                });
+            };
+
+        $$.each(function(i) {
+            var row = $(this),
+                del = row.find('input:checkbox[id $= "-DELETE"]');
+            if (del.length) {
+                // If you specify "can_delete = True" when creating an inline formset,
+                // Django adds a checkbox to each form in the formset.
+                // Replace the default checkbox with a hidden field:
+                if (del.is(':checked')) {
+                    // If an inline formset containing deleted forms fails validation, make sure
+                    // we keep the forms hidden (thanks for the bug report and suggested fix Mike)
+                    del.before('<input type="hidden" name="' + del.attr('name') +'" id="' + del.attr('id') +'" value="on" />');
+                    row.hide();
+                } else {
+                    del.before('<input type="hidden" name="' + del.attr('name') +'" id="' + del.attr('id') +'" />');
+                }
+                // Hide any labels associated with the DELETE checkbox:
+                $('label[for="' + del.attr('id') + '"]').hide();
+                del.remove();
+            }
+            if (hasChildElements(row)) {
+                row.addClass(options.formCssClass);
+                if (row.is(':visible')) {
+                    insertDeleteLink(row);
+                    applyExtraClasses(row, i);
+                }
+            }
+        });
+
+        if ($$.length) {
+            var hideAddButton = !showAddButton(),
+                addButton, template;
+            if (options.formTemplate) {
+                // If a form template was specified, we'll clone it to generate new form instances:
+                template = (options.formTemplate instanceof $) ? options.formTemplate : $(options.formTemplate);
+                template.removeAttr('id').addClass(options.formCssClass + ' formset-custom-template');
+                template.find(childElementSelector).each(function() {
+                    updateElementIndex($(this), options.prefix, '__prefix__');
+                });
+                insertDeleteLink(template);
+            } else {
+                // Otherwise, use the last form in the formset; this works much better if you've got
+                // extra (>= 1) forms (thnaks to justhamade for pointing this out):
+                if (options.hideLastAddForm) $('.' + options.formCssClass + ':last').hide();
+                template = $('.' + options.formCssClass + ':last').clone(true).removeAttr('id');
+                template.find('input:hidden[id $= "-DELETE"]').remove();
+                // Clear all cloned fields, except those the user wants to keep (thanks to brunogola for the suggestion):
+                template.find(childElementSelector).not(options.keepFieldValues).each(function() {
+                    var elem = $(this);
+                    // If this is a checkbox or radiobutton, uncheck it.
+                    // This fixes Issue 1, reported by Wilson.Andrew.J:
+                    if (elem.is('input:checkbox') || elem.is('input:radio')) {
+                        elem.attr('checked', false);
+                    } else {
+                        elem.val('');
+                    }
+                });
+            }
+            // FIXME: Perhaps using $.data would be a better idea?
+            options.formTemplate = template;
+
+            var addButtonHTML = '<a class="' + options.addCssClass + '" href="javascript:void(0)">' + options.addText + '</a>';
+            if (options.addContainerClass) {
+                // If we have a specific container for the "add" button,
+                // place it as the last child of that container:
+                var addContainer = $('[class*="' + options.addContainerClass + '"');
+                addContainer.append(addButtonHTML);
+                addButton = addContainer.find('[class="' + options.addCssClass + '"]');
+            } else if ($$.is('TR')) {
+                // If forms are laid out as table rows, insert the
+                // "add" button in a new table row:
+                var numCols = $$.eq(0).children().length,   // This is a bit of an assumption :|
+                    buttonRow = $('<tr><td colspan="' + numCols + '">' + addButtonHTML + '</tr>').addClass(options.formCssClass + '-add');
+                $$.parent().append(buttonRow);
+                addButton = buttonRow.find('a');
+            } else {
+                // Otherwise, insert it immediately after the last form:
+                $$.filter(':last').after(addButtonHTML);
+                addButton = $$.filter(':last').next();
+            }
+
+            if (hideAddButton) addButton.hide();
+
+            addButton.click(function() {
+                var formCount = parseInt(totalForms.val()),
+                    row = options.formTemplate.clone(true).removeClass('formset-custom-template'),
+                    buttonRow = $($(this).parents('tr.' + options.formCssClass + '-add').get(0) || this),
+                    delCssSelector = $.trim(options.deleteCssClass).replace(/\s+/g, '.');
+                applyExtraClasses(row, formCount);
+                row.insertBefore(buttonRow).show();
+                row.find(childElementSelector).each(function() {
+                    updateElementIndex($(this), options.prefix, formCount);
+                });
+                totalForms.val(formCount + 1);
+                // Check if we're above the minimum allowed number of forms -> show all delete link(s)
+                if (showDeleteLinks()){
+                    $('a.' + delCssSelector).each(function(){$(this).show();});
+                }
+                // Check if we've exceeded the maximum allowed number of forms:
+                if (!showAddButton()) buttonRow.hide();
+                // If a post-add callback was supplied, call it with the added form:
+                if (options.added) options.added(row);
+                return false;
+            });
+        }
+
+        return $$;
+    };
+
+    /* Setup plugin defaults */
+    $.fn.formset.defaults = {
+        prefix: 'form',                  // The form prefix for your django formset
+        formTemplate: null,              // The jQuery selection cloned to generate new form instances
+        addText: 'add another',          // Text for the add link
+        deleteText: 'remove',            // Text for the delete link
+        addContainerClass: null,         // Container CSS class for the add link
+        deleteContainerClass: null,      // Container CSS class for the delete link
+        addCssClass: 'add-row',          // CSS class applied to the add link
+        deleteCssClass: 'delete-row',    // CSS class applied to the delete link
+        formCssClass: 'dynamic-form',    // CSS class applied to each form in a formset
+        extraClasses: [],                // Additional CSS classes, which will be applied to each form in turn
+        keepFieldValues: '',             // jQuery selector for fields whose values should be kept when the form is cloned
+        added: null,                     // Function called each time a new form is added
+        removed: null,                   // Function called each time a form is deleted
+        hideLastAddForm: false           // When set to true, hide last empty add form (becomes visible when clicking on add button)
+    };
+})(jQuery);
Index: sipvs_project/settings.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>\"\"\"\nDjango settings for sipvs_project project.\n\nGenerated by 'django-admin startproject' using Django 4.1.1.\n\nFor more information on this file, see\nhttps://docs.djangoproject.com/en/4.1/topics/settings/\n\nFor the full list of settings and their values, see\nhttps://docs.djangoproject.com/en/4.1/ref/settings/\n\"\"\"\nimport os\nfrom pathlib import Path\n\n# Build paths inside the project like this: BASE_DIR / 'subdir'.\nBASE_DIR = Path(__file__).resolve().parent.parent\n\n\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/4.1/howto/deployment/checklist/\n\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = 'django-insecure-_sn^axo!vf+z9wo@k1eeawpe^b=!9swderbp2$45!!m5k5*23i'\n\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\n\nALLOWED_HOSTS = []\n\n\n# Application definition\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'sipvs_project.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [BASE_DIR / 'templates']\n        ,\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'sipvs_project.wsgi.application'\n\n\n# Database\n# https://docs.djangoproject.com/en/4.1/ref/settings/#databases\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': BASE_DIR / 'db.sqlite3',\n    }\n}\n\n\n# Password validation\n# https://docs.djangoproject.com/en/4.1/ref/settings/#auth-password-validators\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\n\n# Internationalization\n# https://docs.djangoproject.com/en/4.1/topics/i18n/\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_TZ = True\n\n\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/4.1/howto/static-files/\n\nSTATIC_URL = '/static/'\nSTATICFILES_DIRS = (\n    os.path.join(BASE_DIR, \"static/\"),\n)\n#STATIC_ROOT = os.path.join(BASE_DIR, 'static')\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field\n\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/sipvs_project/settings.py b/sipvs_project/settings.py
--- a/sipvs_project/settings.py	(revision 8982e6f5c4cc96e5d2c3c53175ee75376743c091)
+++ b/sipvs_project/settings.py	(date 1664356588219)
@@ -12,6 +12,8 @@
 import os
 from pathlib import Path
 
+import formular_web.apps
+
 # Build paths inside the project like this: BASE_DIR / 'subdir'.
 BASE_DIR = Path(__file__).resolve().parent.parent
 
@@ -31,6 +33,7 @@
 # Application definition
 
 INSTALLED_APPS = [
+    'formular_web.apps.FormularWebConfig',
     'django.contrib.admin',
     'django.contrib.auth',
     'django.contrib.contenttypes',
